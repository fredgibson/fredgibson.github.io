/**
 * C2C plugin JS library wrapped in BnsC2CPlugin closure
 * Depends on: jquery, C2C-pstmsg.js
 *
 * Author: Richard Zhang
 * 
 */
(function(window, undefined) {

	/**
	 * 1. Check jQuery existence here
	 * 2. Check c2c-pstmsg existence here
	 * 3. Check c2c-site.js here
	 * 
	*/
	(function() {
		if (window.jQuery === undefined){
			throw "jQuery not included!";
		}
		if (jQuery.prototype.jquery === undefined) {
			throw "jQuery version not found!";
		}
		usedVer = jQuery.prototype.jquery.split(".");
		if (parseInt(usedVer[0]) < 1 || parseInt(usedVer[1]) < 5) {
			throw "Minimum jQuery version must be 1.5";
		}
		if (BnsPostMessage === undefined) {
			throw "c2c-pstmsg.js not included";
		}
		if (BnsC2CLoader === undefined) {
			throw "c2c-loader.js not included";
		}
		if (BnsC2CCookie === undefined) {
			throw "c2c-cookie.js not included";
		}
		
		if (window.BnsC2CPlugin !== undefined) {
			window._BnsC2CPlugin = window.BnsC2CPlugin;
		}
	})();
	
	var BnsC2CPlugin = {
	
		version: "1.0",

		showMainFramePageId: "",
		
		mngTagIds: {
			blockingDivId: 'c2c_blocking_div',
			containerDivId: 'c2c_container_div',
			mainIframeId: 'c2c_main_frame',
		
			clsBlockingDivId: 'c2c_cls_blocking_div',
			clsContainerDivId: 'c2c_cls_container_div',
			clsIframeId: 'c2c_cls_frame'
		},
		
		mngCSSClasses: {
			hideDivCSS: 'c2c_hide'
		},
		
		lnkMarkers: {
			/**
			 * marker to indicate the link/button to launch UI chat
			*/
			uiChatLaunchLnk: '.c2c_launch_link',
			/**
			 * marker to indicate the link/button to launch AA chat
			*/
			aaChatLaunchLnk: '.c2c_aa_launch_link',
			
			quitConAppLink: '.c2c_quit_launch_link' 
		},

		htmlDefs: {
			tagNameProp: 'tagName',
			hrefprop: 'href',
			onClickProp: 'onclick',
			iFrameSrc: 'src',
			scrollEvt: 'scroll',
			resizeEvt: 'resize',
			cssClass: 'class',
			cssDisplay: 'display',
			displayNone: 'none',
			displayBlock: 'block'
		},
		
		/**
		 * valid application IDs, ensure hosting page provides valid declaration
		*/
		chatAppIds: {
			SOL: true,
			SiTcom: true,
			OAM: true,
			SBcom: true,
			CCV: true
		},
		
		chatMode: {
			userInitiated: 'UI',
			systemInitiated: 'SI',
			appAbandonded: 'AA',
			chatRestored: 'RS'
		},
		
		viewStyles: {
			invitationStyles: {
				/*
				 * if no class, use null, if more than one class, use space to separate, e.g. "classA classB classC"
				*/
				blockingDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_container_blocking_zindex',
				containerDivCSS: 'c2c_container c2c_show c2c_container_zindex',
				
				/*
				 * iframeStyles defined as 2 dimension array, iframe does not support class attribute
				 * give value null for no styles
				*/
				iframeStyles: {
					padding: '0',
					border: '0',
					position: 'absolute',
					'z-index': '3020'
				},
				initIFrmSize: {
					height: '240px',
					width: '430px'
				},
				
				initIFrmSizeOrg: {
					height: '240px',
					width: '430px'
				},
				
				initIFrmSizeSMCFlash: {
					height: '90px',
					width: '490px'
				},
				
				manageIFrmPos: true
			},
			
			
			invitationStylesSMCFlash: {
				/*
				 * if no class, use null, if more than one class, use space to separate, e.g. "classA classB classC"
				*/
				blockingDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_container_blocking_zindex',
				containerDivCSS: 'c2c_container c2c_show c2c_container_zindex',
				
				/*
				 * iframeStyles defined as 2 dimension array, iframe does not support class attribute
				 * give value null for no styles
				*/
				iframeStyles: {
					padding: '0',
					border: '0',
					position: 'absolute',
					'z-index': '3020'
				},
				initIFrmSize: {
					height: '90px',
					width: '490px'
				},
				
				manageIFrmPos: true
			},
			
			
			invitationAaSiStyles: {
				/**
				 * declared here, properties built up at script loading time in BnsC2CPlugin.prepareC2CStyles();
				 */
				/**
				 * for SI/AA launched chat invitation: to address the issue of no agent available case
				 */
				blockingAaSiDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_container_blocking_zindex',
				containerAaSiDivCSS: 'c2c_container c2c_show c2c_container_zindex'
			},
			preQuestionStyles: {
				blockingDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_container_blocking_zindex',
				containerDivCSS: 'c2c_container c2c_show c2c_container_zindex',
				/*
				 * iframeStyles defined as 2 dimension array, iframe does not support class attribute
				 * give value null for no styles
				*/
				iframeStyles:  {
					padding: '0',
					border: '0',
					position: 'absolute',
					'z-index': '3020'
				},
				initIFrmSize: {
					height: '210px',
					width: '430px'
				},
				maxIFrameHeight: 500,
				manageIFrmPos: true
			},
			chatStyles: {
				blockingDivCSS: 'c2c_hide',
				containerDivCSS: 'c2c_container_show_chat c2c_container_zindex',
				iframeStyles: {
					height: '356px',
					width: '500px',
					margin: '0px',
					position: 'static',
					'text-align': 'left',
					padding:  '0',
					border: '0'
				},
				manageIFrmPos: false
			},
			chatPlaceHolderStyles: {
				blockingDivCSS: 'c2c_hide',
				containerDivCSS: 'c2c_hide',
				iframeStyles: {
					display: 'none'
				},
				manageIFrmPos: false
			},
			popupChatStyles: {
				blockingDivCSS: 'c2c_hide',
				containerDivCSS:  'c2c_hide',
				iframeStyles: {
					display: 'none'
				},
				manageIFrmPos: false
			},
			minimizedChatStyles: {
				blockingDivCSS: 'c2c_hide',
				containerDivCSS: 'c2c_container_show_chat c2c_container_zindex',
				iframeStyles: {
					height: '35px',
					width: '300px',
					margin: '0px',
					'text-align': 'left',
					padding: '0',
					border: '0', 
					'float': 'right'
				},
				manageIFrmPos: false
			},
			closeChatConfirmStyles: {
				clsBlockingDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_cls_blocking_zindex',
				clsContainerDivCSS: 'c2c_container c2c_show c2c_cls_container_zindex',
				clsIframeStyles: {
					padding: '0',
					border: '0',
					position: 'absolute',
					'z-index': '3020'
				},
				initIFrmSize: {
					height: '188px',
					width: '430px'
				},
				manageIFrmPos: true
			},
			surveyStyles: {
				blockingDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_container_blocking_zindex',
				containerDivCSS: 'c2c_container c2c_show c2c_container_zindex',
				iframeStyles: {
					padding: '0',
					border: '0',
					position: 'absolute',
					'z-index': '3020'
				},
				initIFrmSize: {
					height: '461px',//210px
					width: '430px'
				},
				initIFrmSizeOrg: {
					height: '461px',
					width: '430px'
				},
				maxIFrameHeight: 500,
				manageIFrmPos: true
			},
			callConfirmationStyles:{
				/*
				 * if no class, use null, if more than one class, use space to separate, e.g. "classA classB classC"
				*/
				blockingDivCSS: 'c2c_blocking_cover c2c_blocking_cover_opacity_40p c2c_container_blocking_zindex',
				containerDivCSS: 'c2c_container c2c_show c2c_container_zindex',
				
				/*
				 * iframeStyles defined as 2 dimension array, iframe does not support class attribute
				 * give value null for no styles
				*/
				iframeStyles: {
					padding: '0',
					border: '0',
					position: 'absolute',
					'z-index': '3020'
				},
				initIFrmSize: {
					height: '188px',
					width: '430px'
				},
				manageIFrmPos: true
			},
			noChatStyles: {
				/*
				 * if no class, use null, if more than one class, use space to separate, e.g. "classA classB classC"
				*/
				blockingDivCSS: 'c2c_hide',
				containerDivCSS: 'c2c_hide',
				/*
				 * iframeStyles defined as 2 dimension array, iframe does not support class attribute
				 * give value null for no styles
				*/
				iframeStyles: null,
				manageIFrmPos: false
			}
		},
		
		jsfViews: {
			chatInvitation: {
				uri: '/faces/checkIn.xhtml',
				//uri: '/c2cui-demo/userini-c2csysintro.html',
				/* ID defined in viewStyles */
				viewStylesId: 'invitationStyles'
			},
			
			chatInvitationSMCFlash: {
				uri: '/faces/checkIn.xhtml',
				//uri: '/c2cui-demo/userini-c2csysintro.html',
				/* ID defined in viewStyles */
				viewStylesId: 'invitationStylesSMCFlash'
			},
			
			
			chatAaSiInvitation: {
				/**
				 * properties built up from chatInvitation definition at prepareC2CStyles()
				 */
				viewStylesId: 'invitationAaSiStyles'
			},
			//for restore chat either on page navigation or on from chat popup browser
			chat: {
				uri: '/faces/views/chat.xhtml',
				//uri: '/c2cui-demo/userini-startchat.html',
				viewStylesId: 'chatStyles',
				
				//parameters passed to uri
				restoreChatParam: 'restore',	
				popupChatParam: 'popup'
			},
			chatMinimized: {
				/**
				 * other properties built up from chat: in prepareC2CStyles()
				 */
				viewStylesId: 'minimizedChatStyles'
			},
			/* page presented in hidden container div when chat is presented in popup. For popup chat to cross-domain access window.opener  */
			chatPlaceHolder: {
				uri: '/faces/views/chatPlaceHolder.xhtml',
				//uri: '/c2cui-demo/userini-popchatholder.html',
				viewStylesId: 'chatPlaceHolderStyles'
			},
			confirmCloseChat: {
				uri: '/faces/views/chatclose.xhtml'
				//uri: '/c2cui-demo/userini-chatclose.html'
			},
			chatSurvey: {
				uri: '/faces/views/postChatSurvey.xhtml',
				//uri: '/c2cui-demo/userini-postchatsurvey.html',
				viewStylesId: 'surveyStyles'
			},
			error:{
				viewStylesId: 'callConfirmationStyles'
			}	
		},
			
		/**
		 * Mapping between message received from c2c web app and corresponding CSS classes for container
		 * div and iframe
		*/
		pstMsgCmdCSS: {
			resizeintro: {
				viewStylesId: 'invitationStyles'
			},
			
			resizeintroSMCFlash: {
				viewStylesId: 'invitationStylesSMCFlash'
			},
			
			closeintro: {
				viewStylesId: 'noChatStyles'
			},
			closeduenoagent: {
				viewStylesId: 'noChatStyles'
			},
			showerror: {
				viewStylesId: 'callConfirmationStyles'
			},
			closeerror: {
				viewStylesId: 'noChatStyles'
			},
			/* show pre-questions before presenting chat window	*/
			showprequestions: {
				viewStylesId: 'preQuestionStyles'
			},
			/* present chat in page*/
			showchat: {
				viewStylesId: 'chatStyles'
			},
			/*ask user whether to close the chat. should be closing chat*/
			closechat: {	
				viewStylesId: 'closeChatConfirmStyles'
			},
			resizesurvey: {
				viewStylesId: 'surveyStyles'
			},
			/*survey closed, end of the chat*/
			closesurvey: {
				viewStylesId: 'noChatStyles'
			},
			/* close the chat without showing survey */
			closechatnosurvey: {
				viewStylesId: 'noChatStyles'
			},
			/*chat being shown in popup browser window*/
			showpopupchat: {
				viewStylesId: 'popupChatStyles'
			},
			restorchatfrompopup: {
				viewStylesId: 'chatStyles'
			},
			minimizechat: {
				viewStylesId: 'minimizedChatStyles'
			},
			maximizechat: {
				viewStylesId: 'chatStyles'
			},
			callconfirmation: {
				viewStylesId: 'callConfirmationStyles'
			}
		},
		
		/**
		 * dynamically built up on getQualifiers response
		*/
		chatOfferInfo: {
			accessMode: "",
			business: "",
			helpDeskId: "",
			UI: { 
				CHAT: { enabled: false, reason: "", idle: "", timeout: "", suspension: "" }, 
				CLICK2CALL: { enabled: false, reason: "", idle: "", timeout: "", suspension: ""} 
			},
			AA: { 
				CHAT: { enabled: false, reason: "", idle: "", timeout: "", suspension: "" }, 
				CLICK2CALL: { enabled: false, reason: "", idle: "", timeout: "", suspension: ""} 
			},
			SI: { 
				CHAT: { enabled: false, reason: "", idle: "", timeout: "", suspension: "" }, 
				CLICK2CALL: { enabled: false, reason: "", idle: "", timeout: "", suspension: ""} 
			},
			c2cToken: null
		},
		
		chatStateInfo: {
			postMsgHooked: false,
			managePosEvtBinded: false,
			chatLaunchMode: null,
			
			anyActAfterTimerSet: false,
			sysInitEvtHooked: false,
			
			C2C_ACTIVE_CHAT: false,
			C2C_SI_SUSPEND: false
		},
		
		arrayContains: function(a, obj) {
			if(typeof a=="undefined" || typeof obj=="undefined")
			{
				return false;
			}
		    for (var i = 0; i < a.length; i++) {
		        if (a[i] === obj) {
		            return true;
		        }
		    }
		    return false;
		},
		
		getHostingPageRootURL: function() {
			//window.location.protocol has : at the end
			return window.location.protocol + "//" + window.location.host + "/";
		},
		getContextPath:function(){
		// window.location.pathname start with /
		    result="";
			var pathArray = window.location.pathname.split( '/' );
			if(typeof pathArray[1] != "undefined" )
			{
				result = pathArray[1];
			}
			return result;
		},
		getC2CWebAppRootURL: function() {
			return BnsC2CLoader.c2cSiteRootURL;
		},
		
		getViewURL: function(viewId) {
			if (BnsC2CPlugin.jsfViews[viewId] === undefined) {
				throw "View Id " + viewId + " not defined in BnsC2CPlugin.jsfViews";
			}
			//BnsC2CLoader.contextRoot has end '/' and BnsC2CPlugin.jsfViews[viewId].uri begins with the '/'
			return BnsC2CPlugin.getC2CWebAppRootURL() + BnsC2CLoader.contextRoot + BnsC2CPlugin.jsfViews[viewId].uri;
		},
		
		getWndWidth: function() {
			if (window.innerWidth !== undefined) { // all except Explorer
				return window.innerWidth;
			}
			if (document.documentElement && document.documentElement.clientWidth !== undefined) {
				return document.documentElement.clientWidth;
			}
			if (document.body && document.body.clientWidth !== undefined) {
				return document.body.clientWidth;
		    }
			throw "Can't get browser window width.";
		},
		
		getWndHeight: function() {
			if (window.innerHeight !== undefined) { // all except Explorer
				return window.innerHeight;
			}
			if (document.documentElement && document.documentElement.clientHeight !== undefined) {
				return document.documentElement.clientHeight;
			}
			if (document.body && document.body.clientHeight !== undefined) {
				return document.body.clientHeight;
		    }
			throw "Can't get browser window height.";
		},
		
		copyStyleDef: function(srcStyles, destStyles) {
			for (styleProp in srcStyles) {
				destStyles[styleProp] = srcStyles[styleProp];
			}
		},
		
		setupInitIFrmSizes: function() {
			for (objProp in BnsC2CPlugin.viewStyles) {
				styleDefs = BnsC2CPlugin.viewStyles[objProp];
				if (styleDefs.initIFrmSize === undefined) {
					continue;
				}
				if (styleDefs.iframeStyles !== undefined) {
					BnsC2CPlugin.copyStyleDef(styleDefs.initIFrmSize, styleDefs.iframeStyles);
				}
				if (styleDefs.clsIframeStyles !== undefined) {
					BnsC2CPlugin.copyStyleDef(styleDefs.initIFrmSize, styleDefs.clsIframeStyles);
				}
			}
		},
		
		getPageXOffset: function() {
			if (window.pageXOffset !== undefined) {
				return window.pageXOffset;
			}
			if (document.documentElement && document.documentElement.scrollLeft !== undefined) {
				return document.documentElement.scrollLeft;
			}
			if (document.body && document.body.scrollLeft !== undefined) {
				return document.body.scrollLeft;
			}
			throw "Can't get pageXOffset.";
		},
		
		getPageYOffset: function() {
			if (window.pageYOffset !== undefined) {
				return window.pageYOffset;
			}
			if (document.documentElement && document.documentElement.scrollTop !== undefined) {
				return document.documentElement.scrollTop;
			}
			if (document.body && document.body.scrollTop !== undefined) {
				return document.body.scrollTop;
			}
			throw "Can't get pageYOffset.";
		},
	
		getIntFromStylePx: function(stylePx) {
			intStr = '';
			digit = '';
			for (i=0; i<stylePx.length; i++) {
				digit = stylePx.charAt(i);
				if (digit >= '0' && digit <= '9') {
					intStr += digit;
					continue;
				}
				break;
			}
			return parseInt(intStr);
		},
		
		calculateIFrmPos: function(iFrmW, iFrmH, iFrmPos) {
			iFrmPos.x = (BnsC2CPlugin.getWndWidth() - iFrmW)/2;
			iFrmPos.y = (BnsC2CPlugin.getWndHeight() - iFrmH)/2;
			
			iFrmPos.x = iFrmPos.x <= 0 ? BnsC2CPlugin.getPageXOffset() : BnsC2CPlugin.getPageXOffset() + iFrmPos.x;
			iFrmPos.y = iFrmPos.y <= 0 ? BnsC2CPlugin.getPageYOffset() : BnsC2CPlugin.getPageYOffset() + iFrmPos.y;
		},
		
		calculateIFrmPosRightBottom: function(iFrmW, iFrmH, iFrmPos) {
			iFrmPos.x = (BnsC2CPlugin.getWndWidth() - iFrmW);
			iFrmPos.y = (BnsC2CPlugin.getWndHeight() - iFrmH);
			
			iFrmPos.x = iFrmPos.x <= 0 ? BnsC2CPlugin.getPageXOffset() : BnsC2CPlugin.getPageXOffset() + iFrmPos.x;
			iFrmPos.y = iFrmPos.y <= 0 ? BnsC2CPlugin.getPageYOffset() : BnsC2CPlugin.getPageYOffset() + iFrmPos.y;
		},
		
		
		
		calculateIFrmPosByStyleDef: function(ifrmStyles) {
			extra = 0;
			if (ifrmStyles.padding !== undefined) {
				extra += BnsC2CPlugin.getIntFromStylePx(ifrmStyles.padding);
			}
			if (ifrmStyles.border !== undefined) {
				extra += BnsC2CPlugin.getIntFromStylePx(ifrmStyles.border);
			}
			iFrmW = extra; iFrmH = extra;
			if (ifrmStyles.width !== undefined) {
				iFrmW += BnsC2CPlugin.getIntFromStylePx(ifrmStyles.width);
			}
			if (ifrmStyles.height !== undefined) {
				iFrmH += BnsC2CPlugin.getIntFromStylePx(ifrmStyles.height);
			}
			
			iFrmPos = {x: 0, y: 0};
			
			
				BnsC2CPlugin.calculateIFrmPos(iFrmW, iFrmH, iFrmPos);
			
			ifrmStyles.left = iFrmPos.x + 'px';
			ifrmStyles.top = iFrmPos.y + 'px';
			
			
			
		},
		
		calculateIFramePosByJQFrm: function(jqIFrm,msgCmd) {
			iFrmPos = { x: 0, y: 0};
			
			if(msgCmd=='resizeintroSMCFlash' ){
			
				BnsC2CPlugin.calculateIFrmPosRightBottom(jqIFrm.width(), jqIFrm.height(), iFrmPos);
			}
			else
			{
				BnsC2CPlugin.calculateIFrmPos(jqIFrm.width(), jqIFrm.height(), iFrmPos);
			}
			return iFrmPos;
		},
		
		/**
		 * param must not be empty string
		 */
		isValidStringParam: function(param) {
			return param && typeof(param) === 'string' && param.length > 0;
		},
		
		/*
		 *  Hosting page call this function to add any extra runtime info for C2C 
		 *  WebApp to use
		 */
		setHostingPageProp: function(propName, value) {
			if (! BnsC2CPlugin.isValidStringParam(propName) || ! BnsC2CPlugin.isValidStringParam(value)) {
				return;
			}
			BnsC2CLoader.hostInfo[propName] = value;
		},
		
		addHostPageInfoToMap: function(paramMap) {
			if (! BnsC2CLoader.hostInfo) {
				return;
			}
			for (hostProp in BnsC2CLoader.hostInfo) {
				paramMap[hostProp] = BnsC2CLoader.hostInfo[hostProp];
			}
			
			paramMap["C2Cv2Launched"]= BnsC2CPlugin.g_isC2Cv2Launched.toString();
			
			if(BnsC2CPlugin.g_currentPage != null  && typeof (paramMap["page"]) !="undefined" && paramMap["page"]!=BnsC2CPlugin.g_currentPage )
			{
				//v2: overwrite the page info:
				paramMap["page"]=BnsC2CPlugin.g_currentPage;
				
			}
		},
		
		setChatLaunchMode: function(flowMode) {
			BnsC2CPlugin.chatStateInfo.chatLaunchMode = flowMode;
		},
		
		isChatLaunchMode: function(flowMode) {
			return BnsC2CPlugin.chatStateInfo.chatLaunchMode != null 
				&& BnsC2CPlugin.chatStateInfo.chatLaunchMode == flowMode;
		},
		
		isUILaunchedChat: function() {
			return BnsC2CPlugin.isChatLaunchMode(BnsC2CPlugin.chatMode.userInitiated);
		},
		
		isSILaunchedChat: function() {
			return BnsC2CPlugin.isChatLaunchMode(BnsC2CPlugin.chatMode.systemInitiated);
		},
		
		isAALaunchedChat: function() {
			return BnsC2CPlugin.isChatLaunchMode(BnsC2CPlugin.chatMode.appAbandonded);
		},
		
		isRestoredChat: function() {
			return BnsC2CPlugin.isChatLaunchMode(BnsC2CPlugin.chatMode.chatRestored);
		},
		
		isInChatFlow: function() {
			return BnsC2CPlugin.chatStateInfo.chatLaunchMode != null;
		},
		
		hasAnyActAfterTimerSet: function() {
			return BnsC2CPlugin.chatStateInfo.anyActAfterTimerSet;
		},
		
		setActAfterTimerSet: function(val) {
			BnsC2CPlugin.chatStateInfo.anyActAfterTimerSet = val;
		},
		
		setSIDeclinedCookie: function() {
			days = BnsC2CPlugin.chatOfferInfo.SI.CHAT.suspension / (24 * 60 * 60);
			BnsC2CCookie.setSISuspendedCookie(days);
		},
		
		isSISuspended: function() {
			return BnsC2CCookie.hasSIChatSuspended();
		},
		
		/** 
		 * class to hold an application abandondment link detected in hosting page
		 * jqLink:  jQuery object of <a>, <input>  or <button> of AA link
		 * orgHref: original href value in <a> link
		 * orgOnClick: original onclick value in <a>, <input> or <button> 
		 * aaActionInstalled: whether AA action installed for this link
		*/
		ApplicationAbandondmentLink: function() {
			this.jqLink = null;
			this.orgHref = null;
			this.orgOnClick = null;
			this.aaActionInstalled = false;
		},
		
		/**
		 * jQuery AA of AppAbandondmentLink objects
		 */
		appAbandondLinks: {
			aaLaunchLink: null,		/*link to HTML elment object of <a>, <input> or <button>, which launchs the AA invitation*/
			jQueryAALinks: []		/*array of ApplicationAbandondmentLink objects */
		},
		
		isAAAnchorLink: function(jqElem) {
			tagName = jqElem.prop(BnsC2CPlugin.htmlDefs.tagNameProp);
			return tagName == 'A';		
		},
		
		isAAButtonLink: function(jqElem) {
			tagName = jqElem.prop(BnsC2CPlugin.htmlDefs.tagNameProp);
			return tagName == 'INPUT' || tagName =='BUTTON';
		},
		
		/**
		 * jqAALink - object of ApplicationAbandondmentLink
		*/
		installAnchorAAAction: function(jqAALink) {
			jqAALink.orgHref = jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.hrefprop);
			jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.hrefprop, 'JavaScript:void();');
			jqAALink.orgOnClick = jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.onClickProp);
			//jqAALink.jqLink.click(function(event) {});
			jqAALink.jqLink[0].onclick = BnsC2CPlugin.launchC2CAAInvitationFromAALnk;
			jqAALink.aaActionInstalled = true;
		},
		
		/**
		 * jqAALink - object of ApplicationAbandondmentLink
		*/
		installButtonAAAction: function(jqAALink) {
			jqAALink.orgOnClick = jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.onClickProp);
			//jqAALink.jqLink.click(function(event) { BnsC2CPlugin.launchC2CAAInvitationFromAALnk(event.target); });
			jqAALink.jqLink[0].onclick = BnsC2CPlugin.launchC2CAAInvitationFromAALnk;
			jqAALink.aaActionInstalled = true;
		},
		
		installC2CAAAction: function(htmlLnk) {
			jqAALink = new BnsC2CPlugin.ApplicationAbandondmentLink();
			jqAALink.jqLink = jQuery(htmlLnk);
			if (BnsC2CPlugin.isAAAnchorLink(jqAALink.jqLink)) {
				BnsC2CPlugin.installAnchorAAAction(jqAALink);
			} else if (BnsC2CPlugin.isAAButtonLink(jqAALink.jqLink)) {
				BnsC2CPlugin.installButtonAAAction(jqAALink);
			}
			return jqAALink;
		},
		
		/**
		 * jqAALink - object of ApplicationAbandondmentLink
		*/
		restoreAALinkActions: function(jqAALink) {
			if (! jqAALink.aaActionInstalled) {
				return;
			}
			if (jqAALink.orgHref != null) {
				jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.hrefprop, jqAALink.orgHref);
			}
			//jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.onClickProp, jqAALink.orgOnClick);
			jqAALink.jqLink[0].onclick = jqAALink.orgOnClick;
			jqAALink.aaActionInstalled = false;
		},
		
		/**
		 * Install C2C AA link handling JS routines
		*/
		hookupAppAbandonmentLinks: function() {
			jqLnks = jQuery(BnsC2CPlugin.lnkMarkers.aaChatLaunchLnk);
			if (jqLnks.length == 0) {
				return;
			}
			for (i=0; i<jqLnks.length; i++) {
				jqAALink = BnsC2CPlugin.installC2CAAAction(jqLnks[i]);
				BnsC2CPlugin.appAbandondLinks.jQueryAALinks.push(jqAALink);
			}
		},
		
		/**
		 * Restore original hosting page AA link action.
		 * htmlLnk: html link fired the AA invitation
		*/
		restoreAppAbandonmentLinks: function(launchLnk) {
			len = BnsC2CPlugin.appAbandondLinks.jQueryAALinks.length;
			for (i=0; i<len; i++) {
				BnsC2CPlugin.restoreAALinkActions(BnsC2CPlugin.appAbandondLinks.jQueryAALinks[i]);
			}
			BnsC2CPlugin.appAbandondLinks.jQueryAALinks.length = 0;
			BnsC2CPlugin.appAbandondLinks.aaLaunchLink = (launchLnk !== undefined && launchLnk != null) ? launchLnk : null;
		},
		
		createDiv: function(divId) {
			divElem = document.createElement("div");
			divElem.id = divId;
			return divElem;
		},
		
		createIFrame: function(iframeId) {
			iframeElem = document.createElement("iframe");
			iframeElem.id = iframeId;
			//accessibility: add a title to iframe
			iframeElem.title = "Click To Chat"; 
			return iframeElem;
		},
		
		hideUIChatLaunchLink: function() {
			launchLnk = jQuery(BnsC2CPlugin.lnkMarkers.uiChatLaunchLnk);
			if (launchLnk.length > 0) {
				launchLnk.addClass(BnsC2CPlugin.mngCSSClasses.hideDivCSS);
			}
		},
		
		showUIChatLaunchLink: function(businessUnit) {
			launchLnk = jQuery(BnsC2CPlugin.lnkMarkers.uiChatLaunchLnk);
			
			// Remove the class to reveal the UI button if the UI flow mode is allowed,
			// OR it's Wealth (for Wealth, it should always appear... if no agents 
			// available or out of business hours, the interaction offer page should
			///show a message)
			if (launchLnk.length > 0 && 
				(BnsC2CPlugin.hasAnyOfferByFlowMode(BnsC2CPlugin.chatMode.userInitiated) || 
				(businessUnit === 'WEALTH' && BnsC2CPlugin.hasPageQualifierResponseByFlowMode(BnsC2CPlugin.chatMode.userInitiated)))) {
				launchLnk.removeClass(BnsC2CPlugin.mngCSSClasses.hideDivCSS);
			}
		},
		
		buildC2CPageParams: function(paramMap) {
			params = "";
			for (param in paramMap) {
				if (params.length > 0) {
					params += "&";
				} else {
					params = "?";
				}
				params += (param + "=" + encodeURIComponent(paramMap[param]));
			}
			return params;
		},
		
		applyC2CDivCSS: function(divId, cssClasses) {
			jqDiv = jQuery("#" + divId);
			if (jqDiv.attr(BnsC2CPlugin.htmlDefs.cssClass) === cssClasses) {
				return;
			}
			jqDiv.removeClass();
			if (cssClasses !== undefined && cssClasses != null) {
				jqDiv.addClass(cssClasses);
			}
		},
		
		applyBlockingDivCSS: function(cssClasses) {
			BnsC2CPlugin.applyC2CDivCSS(BnsC2CPlugin.mngTagIds.blockingDivId, cssClasses);
		},
		
		applyContainerDivCSS: function(cssClasses) {
			BnsC2CPlugin.applyC2CDivCSS(BnsC2CPlugin.mngTagIds.containerDivId, cssClasses);
		},
		
		applyIFrameStyles: function(jqIframe, styles) {
			if (styles.height === undefined || styles.width === undefined) {
				jqIframe.css(BnsC2CPlugin.htmlDefs.cssDisplay, BnsC2CPlugin.htmlDefs.displayNone);
			} else {
				jqIframe.css(BnsC2CPlugin.htmlDefs.cssDisplay, BnsC2CPlugin.htmlDefs.displayBlock);
			}
			for (styleName in styles) {
				jqIframe.css(styleName, styles[styleName]);
			}
		},
		
		applyMainIFrameStyles: function(styles) {
			jqFrame = jQuery("#" + BnsC2CPlugin.mngTagIds.mainIframeId);
			jqFrame.removeAttr('style');
			if (styles == null) {
				jqFrame.removeAttr(BnsC2CPlugin.htmlDefs.iFrameSrc);
			} else {
				BnsC2CPlugin.applyIFrameStyles(jqFrame, styles);
			} 
		},
		
		applyC2CDivCSSByViewId: function(viewId) {
			viewInfo = BnsC2CPlugin.jsfViews[viewId];
			if (! viewInfo) {
				throw "View Id: "+ viewId + " not defined in BnsC2CPlugin.jsfViews";
			}
			BnsC2CPlugin.applyBlockingDivCSS(BnsC2CPlugin.viewStyles[viewInfo.viewStylesId].blockingDivCSS);
			BnsC2CPlugin.applyContainerDivCSS(BnsC2CPlugin.viewStyles[viewInfo.viewStylesId].containerDivCSS);
		},
		
		removeMainIFramesSytles: function() {
			jqFrame = jQuery("#" + BnsC2CPlugin.mngTagIds.mainIframeId);
			if (jqFrame.length > 0) {
				jqFrame.removeAttr('style');
			}
		},
		
		placeIFrmInCenter: function(jqIFrm, msgCmd) {
			position = BnsC2CPlugin.calculateIFramePosByJQFrm(jqIFrm,msgCmd);
			jqIFrm.css('left', position.x);
			jqIFrm.css('top', position.y);
		},
		
		handleIFramePosEvt: function() {
			jqIFrm = jQuery("#" + BnsC2CPlugin.mngTagIds.clsIframeId);
			if (jqIFrm.length > 0) {
				BnsC2CPlugin.placeIFrmInCenter(jqIFrm,"");
				return;
			}
			
			jqIFrm = jQuery("#" + BnsC2CPlugin.mngTagIds.mainIframeId);
			if (jqIFrm.length > 0 && jqIFrm.attr(BnsC2CPlugin.htmlDefs.iFrameSrc) && jqIFrm.attr(BnsC2CPlugin.htmlDefs.iFrameSrc) != null) {
				BnsC2CPlugin.placeIFrmInCenter(jqIFrm,"");
			}
		},
		
		manageIFramePos: function(mngIfrmPos, ifrmStyles) {
			jqWdn = jQuery(window);
			if (mngIfrmPos) {
				BnsC2CPlugin.calculateIFrmPosByStyleDef(ifrmStyles);
				if (! BnsC2CPlugin.chatStateInfo.managePosEvtBinded) {
					//bind resize, scroll event handler
					jqWdn.bind(BnsC2CPlugin.htmlDefs.scrollEvt, BnsC2CPlugin.handleIFramePosEvt);
					jqWdn.bind(BnsC2CPlugin.htmlDefs.resizeEvt, BnsC2CPlugin.handleIFramePosEvt);
					BnsC2CPlugin.chatStateInfo.managePosEvtBinded = true;
				}
				return;
			} 
			if (BnsC2CPlugin.chatStateInfo.managePosEvtBinded) {
				//unbind resize, scroll event handler
				jqWdn.unbind(BnsC2CPlugin.htmlDefs.scrollEvt);
				jqWdn.unbind(BnsC2CPlugin.htmlDefs.resizeEvt);
				BnsC2CPlugin.chatStateInfo.managePosEvtBinded = false;
			}
		},
		
		applyMainIFrameStylesByViewId: function(viewId) {
			viewInfo = BnsC2CPlugin.jsfViews[viewId];
			if (! viewInfo) {
				throw "View Id: "+ viewId + " not defined in BnsC2CPlugin.jsfViews";
			}
			viewStyleDef = BnsC2CPlugin.viewStyles[viewInfo.viewStylesId];
			if (viewStyleDef.iframeStyles === undefined) {
				return;
			}
			BnsC2CPlugin.manageIFramePos(viewStyleDef.manageIFrmPos, viewStyleDef.iframeStyles);
			BnsC2CPlugin.applyMainIFrameStyles(viewStyleDef.iframeStyles);
		},
		
		applyPstMsgCmdCSS: function(msgCmd) {
			msgCSS = BnsC2CPlugin.pstMsgCmdCSS[msgCmd];
			if (msgCSS === undefined) {
				return;
			}
			viewStyleDef = BnsC2CPlugin.viewStyles[msgCSS.viewStylesId];
			BnsC2CPlugin.applyBlockingDivCSS(viewStyleDef.blockingDivCSS);
			BnsC2CPlugin.manageIFramePos(viewStyleDef.manageIFrmPos, viewStyleDef.iframeStyles);
			BnsC2CPlugin.applyMainIFrameStyles(viewStyleDef.iframeStyles);
			BnsC2CPlugin.applyContainerDivCSS(viewStyleDef.containerDivCSS);
		},
		
		setupPostedIframeSize: function(msgCmd, ifrmSize, isMainIFrm) {
			msgCSS = BnsC2CPlugin.pstMsgCmdCSS[msgCmd];
			if (msgCSS === undefined) {
				return;
			}
			viewStyleDef = BnsC2CPlugin.viewStyles[msgCSS.viewStylesId];
			if (isMainIFrm) {
				viewStyleDef.iframeStyles[BnsPostMessage.paramHeight] = ifrmSize.height + 'px';
				viewStyleDef.iframeStyles[BnsPostMessage.paramWidth] = ifrmSize.width + 'px';
			} else {
				viewStyleDef.clsIframeStyles[BnsPostMessage.paramHeight] = ifrmSize.height + 'px';
				viewStyleDef.clsIframeStyles[BnsPostMessage.paramWidth] = ifrmSize.width + 'px';
			}
			
			if (viewStyleDef.maxIFrameHeight !== undefined 
					&& typeof(viewStyleDef.maxIFrameHeight) === 'number'
					&& ifrmSize.height > viewStyleDef.maxIFrameHeight
					&& isMainIFrm) 
			{
				viewStyleDef.iframeStyles[BnsPostMessage.paramHeight] = viewStyleDef.maxIFrameHeight + 'px';
			}
		},
		
		applyConfirmChatCloseCSS: function() {
			msgCSS = BnsC2CPlugin.pstMsgCmdCSS.closechat;
			if (msgCSS === undefined) {
				return;
			}
			jqElm = jQuery("#" + BnsC2CPlugin.mngTagIds.clsBlockingDivId);
			jqElm.removeClass();
			jqElm.addClass(BnsC2CPlugin.viewStyles[msgCSS.viewStylesId].clsBlockingDivCSS);
			
			jqElm = jQuery("#" + BnsC2CPlugin.mngTagIds.clsContainerDivId);
			jqElm.removeClass();
			jqElm.addClass(BnsC2CPlugin.viewStyles[msgCSS.viewStylesId].clsContainerDivCSS);
			
			jqElm = jQuery("#" + BnsC2CPlugin.mngTagIds.clsIframeId);
			viewStyleDef = BnsC2CPlugin.viewStyles[msgCSS.viewStylesId];
			BnsC2CPlugin.manageIFramePos(viewStyleDef.manageIFrmPos, viewStyleDef.clsIframeStyles);
			BnsC2CPlugin.applyIFrameStyles(jqElm, viewStyleDef.clsIframeStyles);
		},
		
		applyPostedIFrameSize: function(ifrmId, msgCmd, ifrmSize) {
			jqIFrm = jQuery("#" + ifrmId);
			if (jqIFrm.length == 0) {
				return;
			}
			BnsC2CPlugin.applyIFrameStyles(jqIFrm, ifrmSize);
			/*v2: set to center or right bottom, depending on msgCmd */
			BnsC2CPlugin.placeIFrmInCenter(jqIFrm, msgCmd);
			
		},
		
		getViewURLWithParams: function(c2cpageId, paramMap) {
			pageURL = BnsC2CPlugin.getViewURL(c2cpageId);
			if (paramMap) {
				params = BnsC2CPlugin.buildC2CPageParams(paramMap);
				if (params && params.length > 0) {
					pageURL += params;
				}
			}
			return pageURL;
		},
		
		showMainIFrame: function(event) {
			BnsC2CPlugin.applyC2CDivCSSByViewId(BnsC2CPlugin.showMainFramePageId);
			BnsC2CPlugin.showMainFramePageId = "";	// reset
			
			BnsC2CPlugin.removeIFrameOnloadEvent();
		},
		
		removeIFrameOnloadEvent: function() {
			var mainIFrame = document.getElementById(BnsC2CPlugin.mngTagIds.mainIframeId);
			if(mainIFrame.removeEventListener) {
				mainIFrame.removeEventListener('load', BnsC2CPlugin.showMainIFrame, false);
			}
			else {
				mainIFrame.detachEvent('onload', BnsC2CPlugin.showMainIFrame);
			}
		},
		
		loadAndShowC2CPage: function(c2cpageId, paramMap) {
			//var destination = BnsC2CPlugin.getViewURL(c2cpageId) + '#' + encodeURIComponent(document.location.href);
			pageURL = BnsC2CPlugin.getViewURLWithParams(c2cpageId, paramMap);
			/**
			 * TODO:  install onload event listener for iframe to handle the case of no communication to C2C site.
			*/
			BnsC2CPlugin.showMainFramePageId = c2cpageId;
			var mainIFrame = document.getElementById(BnsC2CPlugin.mngTagIds.mainIframeId);
			if(mainIFrame.addEventListener) {
				mainIFrame.addEventListener('load', BnsC2CPlugin.showMainIFrame, false);
			}
			else {
				mainIFrame.attachEvent('onload', BnsC2CPlugin.showMainIFrame);
			}
			mainIFrame.contentWindow.location.replace(pageURL);
			BnsC2CPlugin.removeMainIFramesSytles();
			BnsC2CPlugin.applyMainIFrameStylesByViewId(c2cpageId);
		},
		
		appUrlValidateFail:function()
		{
			
		},
		
		tmpFlowMode:"",
		tmpLaunchStatus:"", /* success or fail */

		
		/* launchChatInvitation_new -> launchChatInvitationOrg: problem: if not whitelist, for AA, the cancel action won't happen!! need further checking   */
		/* reverse to old way:   */
		
		launchChatInvitation: function(flowMode) {
			
			/* obtain consumer app root url then pass the checkIn process*/
		    consumerRootUrl = BnsC2CPlugin.getHostingPageRootURL(); 
			consumerConextpath = BnsC2CPlugin.getContextPath();
			/**
			 * c2c container div and iframe created on first usage
			*/
			BnsC2CPlugin.createC2CDiviFrames();
			
			paramMap = {
				flow: flowMode,
				token: BnsC2CPlugin.chatOfferInfo.c2cToken,
				bu: BnsC2CPlugin.chatOfferInfo.business,
				uiChatStatus: BnsC2CPlugin.chatOfferInfo.UI.CHAT.reason,
				uiCallStatus: BnsC2CPlugin.chatOfferInfo.UI.CLICK2CALL.reason,
				helpDeskId: BnsC2CPlugin.chatOfferInfo.helpDeskId,
				accessMode: BnsC2CPlugin.chatOfferInfo.accessMode,
				checkInRootUrl: consumerRootUrl,
				checkInContextPath:consumerConextpath
			};
			BnsC2CPlugin.addHostPageInfoToMap(paramMap);
			c2cpageId = (flowMode === BnsC2CPlugin.chatMode.userInitiated) ? 'chatInvitation' : 'chatAaSiInvitation';
			BnsC2CPlugin.loadAndShowC2CPage(c2cpageId, paramMap);
			BnsC2CPlugin.setChatLaunchMode(flowMode);
			
		},
		
		
		launchC2CUIInvitation: function() {
			BnsC2CPlugin.g_isC2Cv2Launched=false;
			
			BnsC2CPlugin.prepareC2CStyles();
			if (! BnsC2CPlugin.invitationPreCheck(BnsC2CPlugin.chatMode.userInitiated)) {
				//alert("UI Invitation launch denied");
				return;
			}
			
			BnsC2CPlugin.launchChatInvitation(BnsC2CPlugin.chatMode.userInitiated);
		},
		
		
		launchC2CUIInvitationv2: function(pageid) {
			BnsC2CPlugin.g_isC2Cv2Launched=true;
			
			//get page ui chat status
			if (BnsC2CPlugin.g_dataMap==null)
			{
				BnsC2CPlugin.retrieveC2COffers();
			}
			//20151113: remove the below due to duplicate to the call whtin the handleC2COfferv2
			/*
			else
			{
				BnsC2CPlugin.getUIChatAvailablity();
			}
			*/
			//20151113: added the condition g_dataMap!=null for the code block, change if to else
			//if (BnsC2CPlugin.g_dataMap!=null)
			else
			{
				//re-handle c2c offer of the pageid
				BnsC2CPlugin.handleC2COfferv2(BnsC2CPlugin.g_dataMap ,pageid);
				BnsC2CPlugin.prepareC2CStyles();
				if (! BnsC2CPlugin.invitationPreCheck(BnsC2CPlugin.chatMode.userInitiated)) {
					//alert("UI Invitation launch denied");
					return;
				}
				BnsC2CPlugin.launchChatInvitation(BnsC2CPlugin.chatMode.userInitiated);
			}
		},
		
		launchC2CSIInvitation: function() {
			//20151113: if current page id is not default, rebuild the offer by re-handling it
			if(typeof BnsC2CPlugin.g_currentPage!="undefined" && typeof BnsC2CLoader.hostInfo.page!="undefined" 
				&& BnsC2CPlugin.g_currentPage != BnsC2CLoader.hostInfo.page )
			{
				BnsC2CPlugin.handleC2COffer(BnsC2CPlugin.g_dataMap);
				BnsC2CPlugin.prepareC2CStyles();
			}
			
			
			if (! BnsC2CPlugin.invitationPreCheck(BnsC2CPlugin.chatMode.systemInitiated)) {
				//alert("SI Invitation launch denied");
				return;
			}
			BnsC2CPlugin.launchChatInvitation(BnsC2CPlugin.chatMode.systemInitiated);
		},
		
		/**
		 * htmlLnk: HTML element object by which the AA invitation is fired
		*/
		launchC2CAAInvitation: function(launchLnk) {
			if (! BnsC2CPlugin.invitationPreCheck(BnsC2CPlugin.chatMode.appAbandonded)) {
				//alert("AA Invitation launch denied");
				return;
			}
			BnsC2CPlugin.launchChatInvitation(BnsC2CPlugin.chatMode.appAbandonded);
			BnsC2CPlugin.restoreAppAbandonmentLinks(launchLnk);
		},
		
		/**
		 * launch C2C invitation from <a>, <button> or <input>
		*/
		launchC2CAAInvitationFromAALnk: function() {
			/**
			 * here, this is the launch <a>, <button> or <input> HTML DOM 
			 * object
			 */
			BnsC2CPlugin.launchC2CAAInvitation(this);
			/*stop further button action*/
			return false;
		},
		
		loadConfirmChatClosePage: function(closeFlag) {
			jqElm = document.getElementById(BnsC2CPlugin.mngTagIds.clsIframeId);

			if (closeFlag === 'solQuit') {
				strTargetURL = BnsC2CPlugin.getViewURL('confirmCloseChat') + "?closeFlag=" + closeFlag;
			} else {
				strTargetURL = BnsC2CPlugin.getViewURL('confirmCloseChat');
			}
			
			jqElm.contentWindow.location.replace(strTargetURL);
		},
		
		launchConfirmChatClose: function(closeFlag) {
			BnsC2CPlugin.createConfirmChatDiviFrames();
			BnsC2CPlugin.applyConfirmChatCloseCSS();
			BnsC2CPlugin.loadConfirmChatClosePage(closeFlag);
		},
		
		rmConfirmChatClose: function() {
			jQuery("#" + BnsC2CPlugin.mngTagIds.clsContainerDivId).remove();
			jQuery("#" + BnsC2CPlugin.mngTagIds.clsBlockingDivId).remove();
		},
		
		/**
		 * when chat is show, manage the hosting page chat links' states
		 */
		mngHostingPageStateOnChat: function() {
			BnsC2CPlugin.hideUIChatLaunchLink();
			if (! BnsC2CPlugin.isAALaunchedChat()) {
				BnsC2CPlugin.restoreAppAbandonmentLinks();
			}
		},
		
		launchChat: function() {
			BnsC2CPlugin.applyPstMsgCmdCSS('showchat');
			BnsC2CCookie.setActiveChatCookie(BnsC2CLoader.c2cSiteRootURL);
			BnsC2CPlugin.mngHostingPageStateOnChat();
			
			// Since chat is starting, need to handle C2C for any quitting 
			// mechanisms in consumer apps that have a secure session
			BnsC2CPlugin.handleSecureConAppQuitLinks();
		},
		
		launchChatPlaceHolder: function() {
			BnsC2CPlugin.loadAndShowC2CPage('chatPlaceHolder');
			BnsC2CPlugin.mngHostingPageStateOnChat();
		},
		
		/**
		 * close the C2C windows before chat window opened in chat flow
		*/
		closeChatInvitation: function(msgCmd) {
			BnsC2CPlugin.applyPstMsgCmdCSS(msgCmd);
			//if launched from AA link, proceed to original AA link action
			if (BnsC2CPlugin.isAALaunchedChat()) {
				/*
				jqLink = jQuery(BnsC2CPlugin.appAbandondLinks.aaLaunchLink);
				jqLink.click();
				*/
				//must use pure HTML DOM object to invoke click call.
				BnsC2CPlugin.appAbandondLinks.aaLaunchLink.click();
			} else if (BnsC2CPlugin.isSILaunchedChat()) {
				if (msgCmd !== 'closeduenoagent') {
					BnsC2CPlugin.setSIDeclinedCookie();
				}
			}
			BnsC2CPlugin.setChatLaunchMode(null);
			BnsC2CPlugin.setupInitIFrmSizes();
			
		},
		
		closeClick2CallConfirm: function() {
			BnsC2CPlugin.applyPstMsgCmdCSS('closeintro');
			BnsC2CPlugin.setChatLaunchMode(null);
			BnsC2CPlugin.setupInitIFrmSizes();
			
		},
		
		launchSurvey: function() {
			BnsC2CPlugin.rmConfirmChatClose();
			BnsC2CPlugin.loadAndShowC2CPage('chatSurvey', true);
			BnsC2CCookie.removeChatCookies();
			BnsC2CPlugin.setChatLaunchMode(null);
			
			// Restore original behaviour to secured consumer app quit button
			BnsC2CPlugin.restoreConAppQuitLinks();
		},
		
		closeSurvey: function() {
			BnsC2CPlugin.applyPstMsgCmdCSS('closesurvey');
			
			if (BnsC2CPlugin.secureConAppQuitLinks.quitLaunchLink !== undefined &&
				BnsC2CPlugin.secureConAppQuitLinks.quitLaunchLink !== null) {
				BnsC2CPlugin.secureConAppQuitLinks.quitLaunchLink.click();
			} else {
				BnsC2CPlugin.mngHostingPageStateOnInit();
			}
		},
		
		closeChatNoSurvey: function() {
			BnsC2CPlugin.rmConfirmChatClose();
			BnsC2CPlugin.applyPstMsgCmdCSS('closechatnosurvey');
			BnsC2CCookie.removeChatCookies();
			BnsC2CPlugin.setChatLaunchMode(null);
			BnsC2CPlugin.mngHostingPageStateOnInit();

			// Restore original behaviour to secured consumer app quit button
			BnsC2CPlugin.restoreConAppQuitLinks();
		},
		
		createDivWithIframe: function(blkDivId, divId, frameId) {
			c2cDiv = document.getElementById(divId);
			if (c2cDiv != null) {
				return;
			}
			jQBd = jQuery('body');
			
			c2cBlkDiv = BnsC2CPlugin.createDiv(blkDivId);
			c2cBlkDiv.className = BnsC2CPlugin.mngCSSClasses.hideDivCSS;
			jQBd.append(c2cBlkDiv);
			
			c2cDiv = BnsC2CPlugin.createDiv(divId);
			c2cFrame = BnsC2CPlugin.createIFrame(frameId);
			c2cDiv.appendChild(c2cFrame);
			c2cDiv.className = BnsC2CPlugin.mngCSSClasses.hideDivCSS;
			jQBd.append(c2cDiv);
		},
		
		createC2CDiviFrames: function() {
			BnsC2CPlugin.createDivWithIframe(BnsC2CPlugin.mngTagIds.blockingDivId, BnsC2CPlugin.mngTagIds.containerDivId, BnsC2CPlugin.mngTagIds.mainIframeId);
		},
		
		createConfirmChatDiviFrames: function() {
			BnsC2CPlugin.createDivWithIframe(BnsC2CPlugin.mngTagIds.clsBlockingDivId, BnsC2CPlugin.mngTagIds.clsContainerDivId, BnsC2CPlugin.mngTagIds.clsIframeId);
		},
		
		hasAnyC2COffers: function() {
			return BnsC2CPlugin.chatOfferInfo.UI.CHAT.enabled
					|| BnsC2CPlugin.chatOfferInfo.UI.CLICK2CALL.enabled
					|| BnsC2CPlugin.chatOfferInfo.AA.CHAT.enabled
					|| BnsC2CPlugin.chatOfferInfo.AA.CLICK2CALL.enabled
					|| BnsC2CPlugin.chatOfferInfo.SI.CHAT.enabled
					|| BnsC2CPlugin.chatOfferInfo.AA.CLICK2CALL.enabled;
		},
		
		hasAnyOfferByFlowMode: function(flowMode) {
			return BnsC2CPlugin.chatOfferInfo[flowMode].CHAT.enabled || BnsC2CPlugin.chatOfferInfo[flowMode].CLICK2CALL.enabled
		},
		
		// Test if either a chat or a call even exists for the given flowMode
		// For example, configuration could purposely not have AA (for example) 
		//  at all, which is different from it being in the configuration and 
		//  being set to false
		hasPageQualifierResponseByFlowMode: function(flowMode) {
			// If there is no reason set, then nothing has been configured at 
			//  all for this flowMode/media type combination, OR if the killswitch
			// for this flowType/media type combination has disabled it
			return (BnsC2CPlugin.chatOfferInfo[flowMode].CHAT.reason !== "") || 
					(BnsC2CPlugin.chatOfferInfo[flowMode].CLICK2CALL.reason !== "")
		},
		
		shouldStartSITimer: function() {
			return typeof(BnsC2CPlugin.chatOfferInfo.SI.CHAT.idle) === 'number' 
					&& BnsC2CPlugin.chatOfferInfo.SI.CHAT.idle > 0
					&& ! BnsC2CPlugin.isSISuspended()
					&& ! BnsC2CPlugin.isInChatFlow()
					&& ! BnsC2CPlugin.hasAnyActAfterTimerSet();
		},
		
		sysInitChatTimerHandler: function() {
			if (BnsC2CPlugin.isInChatFlow()) {
				return;
			}
			if (BnsC2CPlugin.isSISuspended()) {
				return;
			}
			if (BnsC2CPlugin.hasAnyActAfterTimerSet()) {
				BnsC2CPlugin.setActAfterTimerSet(false);
				setTimeout(BnsC2CPlugin.sysInitChatTimerHandler, BnsC2CPlugin.chatOfferInfo.SI.CHAT.idle * 1000);
				return;
			}
			BnsC2CPlugin.launchC2CSIInvitation();		
		},
		
		invitationPreCheck: function(flowMode) {
			
			// Determine if UI flow mode and from Wealth
			// If so, then we should show the UI button; in this case, any 
			// unavailability
			isWealthUserInitiated = (flowMode === 'UI') && 
									(BnsC2CPlugin.chatOfferInfo.business === 'WEALTH') &&
									(BnsC2CPlugin.hasPageQualifierResponseByFlowMode(flowMode));
			isRetailUserInitiated = (flowMode === 'UI') && 
									(BnsC2CPlugin.chatOfferInfo.business === 'RETAIL') &&
									(BnsC2CPlugin.hasPageQualifierResponseByFlowMode(flowMode));
			//return BnsC2CLoader.hostInfo.app && BnsC2CLoader.hostInfo.page && (BnsC2CPlugin.hasAnyOfferByFlowMode(flowMode) || isWealthUserInitiated);
			//v2: BnsC2CPlugin.g_currentPage, allow retail UI chat 						
			return BnsC2CLoader.hostInfo.app && BnsC2CPlugin.g_currentPage && (BnsC2CPlugin.hasAnyOfferByFlowMode(flowMode) || isWealthUserInitiated || isRetailUserInitiated);
			
		},
		
		send: function(msg) {
			BnsPostMessage.postMessage(msg, BnsC2CPlugin.getC2CWebAppRootURL(), document.getElementById(BnsC2CPlugin.mngTagIds.containerDivId).contentWindow);
			return false;
		},
		
		parseParamPair: function(param) {
			if (param === undefined || typeof(param) !== 'string') {
				return null;
			}
			pair = param.split(BnsPostMessage.paramKeyValSeparator);
			if (pair.length != 2) {
				return null;
			}
			pair[0] = pair[0].trim();
			pair[1] = pair[1].trim();
			return pair;
		},
		
		/**
		 * size param in the format of 
		 * height=NNNpx;width=NNNpx
		 */
		parseIFrameSizeParam: function(fullParam) {
			if (fullParam === undefined || typeof(fullParam) !== 'string') {
				return null;
			}
			paramPairs = fullParam.split(BnsPostMessage.paramSeparator);
			ifrmSize = {height: 0, width: 0};
			for (i=0; i<paramPairs.length; i++) {
				pair = BnsC2CPlugin.parseParamPair(paramPairs[i].trim());
				if (pair == null) {
					continue;
				}
				ifrmSize[pair[0]] = pair[1];
			}
			return (ifrmSize[BnsPostMessage.paramHeight] != 0 && ifrmSize[BnsPostMessage.paramWidth] != 0) ? ifrmSize : null;			
		},
		
		handleCmdWithIfrmSize: function(ifrmId, pstMsgCmd, sizeParam) {
			ifrmSize = BnsC2CPlugin.parseIFrameSizeParam(sizeParam);
			if (ifrmSize != null) {
				/*also fix survey windows size issue */
				if( pstMsgCmd=='resizesurvey' && ifrmSize[BnsPostMessage.paramHeight] <300)
				{
					ifrmSize[BnsPostMessage.paramHeight] = parseInt(BnsC2CPlugin.viewStyles.surveyStyles.initIFrmSizeOrg[BnsPostMessage.paramHeight]);
				}
				BnsC2CPlugin.setupPostedIframeSize(pstMsgCmd, ifrmSize, ifrmId === BnsC2CPlugin.mngTagIds.mainIframeId);
				BnsC2CPlugin.applyPostedIFrameSize(ifrmId, pstMsgCmd, ifrmSize);
			}
			/*v2: null means it is the invitation form?? interactionOffer?? also fix survey windows size issue */
			else if(typeof pstMsgCmd !='undefined'  )
			{
				ifrmSize = {height: 0, width: 0};
				
				 if( pstMsgCmd=='resizeintroSMCFlash' )
					{
						ifrmSize[BnsPostMessage.paramHeight] = parseInt(BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSizeSMCFlash[BnsPostMessage.paramHeight]);
						ifrmSize[BnsPostMessage.paramWidth] = parseInt(BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSizeSMCFlash[BnsPostMessage.paramWidth]);
					}
				 
				 else if( pstMsgCmd=='resizeintro')
					{
						ifrmSize[BnsPostMessage.paramHeight] = parseInt(BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSizeOrg[BnsPostMessage.paramHeight]);
						ifrmSize[BnsPostMessage.paramWidth] = parseInt(BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSizeOrg[BnsPostMessage.paramWidth]);
					}
				else if( pstMsgCmd=='resizesurvey')
					{
						ifrmSize[BnsPostMessage.paramHeight] = parseInt(BnsC2CPlugin.viewStyles.surveyStyles.initIFrmSizeOrg[BnsPostMessage.paramHeight]);
						ifrmSize[BnsPostMessage.paramWidth] = parseInt(BnsC2CPlugin.viewStyles.surveyStyles.initIFrmSizeOrg[BnsPostMessage.paramWidth]);
					}
					
				if(ifrmSize[BnsPostMessage.paramHeight]>0)
				{
					BnsC2CPlugin.setupPostedIframeSize(pstMsgCmd, ifrmSize, ifrmId === BnsC2CPlugin.mngTagIds.mainIframeId);
					BnsC2CPlugin.applyPostedIFrameSize(ifrmId, pstMsgCmd, ifrmSize);
				}
			}
		},
		
		/**
		 * message handler map with message command and its coresponding handling function, if a command takes command data,
		 * define the function as function(cmdData)
		*/
		msgHandlers: {
			showError:function(sizeParam){
				BnsC2CPlugin.applyC2CDivCSSByViewId('error');
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyMainIFrameStylesByViewId('error');
				
				BnsC2CCookie.removeChatCookies();
				BnsC2CPlugin.setChatLaunchMode(null);
			},
			errorAutoClose: function(){
				BnsC2CCookie.removeChatCookies();
				BnsC2CPlugin.closeChatInvitation('closeintro');
				BnsC2CPlugin.rmConfirmChatClose();
				BnsC2CPlugin.retrieveC2COffers();
			},
			//rooturl command from C2C iframe
			//BnsPostMessage.rootURLCmd: function(rootUrl) {
			rooturl: function(rootUrl) {
				BnsC2CLoader.c2cSiteRootURL = rootUrl;
			},
			resizeintro: function(sizeParam) {
				
				
				if (! BnsC2CPlugin.isUILaunchedChat()) {
					BnsC2CPlugin.applyC2CDivCSSByViewId('chatInvitation');
				}
				
				
				BnsC2CPlugin.handleCmdWithIfrmSize(BnsC2CPlugin.mngTagIds.mainIframeId, 'resizeintro', sizeParam);
				
			},
			
			resizeintroSMCFlash: function(sizeParam) {
				
				if (! BnsC2CPlugin.isUILaunchedChat()) {
					/* v2x use SMCFlash, not used in other cases*/
					//BnsC2CPlugin.applyC2CDivCSSByViewId('chatInvitationSMCFlash');
					BnsC2CPlugin.applyC2CDivCSSByViewId('chatInvitation');
				}
				
				BnsC2CPlugin.handleCmdWithIfrmSize(BnsC2CPlugin.mngTagIds.mainIframeId, 'resizeintroSMCFlash', sizeParam);
			},
			
			
			closeintro: function() {
				BnsC2CPlugin.closeChatInvitation('closeintro');
			},
			closeerror: function() {
				BnsC2CPlugin.closeChatInvitation('closeerror');
			},
			closeclick2call: function() {	/* close the dialog of agent will call in 5 minutes, last window of click to call */
				BnsC2CPlugin.closeClick2CallConfirm();
			},
			closeduenoagent: function() {
				BnsC2CPlugin.closeChatInvitation('closeduenoagent');
			},
			showprequestions: function(sizeParam) {
				ifrmSize = BnsC2CPlugin.parseIFrameSizeParam(sizeParam);
				if (ifrmSize != null) {
					BnsC2CPlugin.setupPostedIframeSize('showprequestions', ifrmSize, true);
				}
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyPstMsgCmdCSS('showprequestions');
			},
			resizeprequestions: function(sizeParam) {
				BnsC2CPlugin.handleCmdWithIfrmSize(BnsC2CPlugin.mngTagIds.mainIframeId, 'showprequestions', sizeParam);
			},
			showchat: function() {
				BnsC2CPlugin.launchChat();
			},
			closechat: function(closeFlag) {
				BnsC2CPlugin.launchConfirmChatClose(closeFlag);
			},
			resizeclosechat: function(sizeParam) {
				BnsC2CPlugin.handleCmdWithIfrmSize(BnsC2CPlugin.mngTagIds.clsIframeId, 'closechat', sizeParam);
			},
			closechatnosurvey: function() {
				BnsC2CPlugin.closeChatNoSurvey();
			},
			/* close 'the close chat' confirmation dialog */
			closeconfirm: function() {
				BnsC2CPlugin.rmConfirmChatClose();
			},
			showsurvey: function() {
				BnsC2CPlugin.launchSurvey();
			},
			resizesurvey: function(sizeParam) {
				BnsC2CPlugin.handleCmdWithIfrmSize(BnsC2CPlugin.mngTagIds.mainIframeId, 'resizesurvey', sizeParam);
			},
			closesurvey: function() {
				BnsC2CPlugin.closeSurvey();
			},
			showpopupchat: function() {
				//BnsC2CPlugin.launchChatPlaceHolder();
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyPstMsgCmdCSS('showpopupchat');
				BnsC2CCookie.setActiveChatInPopupCookie();
			},
			restorchatfrompopup: function() {
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyPstMsgCmdCSS('restorchatfrompopup');
				BnsC2CCookie.removeActiveChatInPopupCookie();
			},
			minimizechat: function() {
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyPstMsgCmdCSS('minimizechat');
				BnsC2CCookie.setChatWinSizeCookie(true);
			},
			maximizechat: function() {
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyPstMsgCmdCSS('maximizechat');
				BnsC2CCookie.setChatWinSizeCookie(false);
			},
			callconfirmation: function(sizeParam) {
				ifrmSize = BnsC2CPlugin.parseIFrameSizeParam(sizeParam);
				if (ifrmSize != null) {
					BnsC2CPlugin.setupPostedIframeSize('callconfirmation', ifrmSize, true);
				}
				BnsC2CPlugin.removeMainIFramesSytles();
				BnsC2CPlugin.applyPstMsgCmdCSS('callconfirmation');
			},
			removecookies: function() {
				BnsC2CPlugin.cleanCookies();
			},
			defaultHandler: function() {
				alert(message.data);
			}
		},
		
		isHostedInChatInitiationPage: function() {
			return BnsC2CLoader.hostInfo.app != null && BnsC2CLoader.hostInfo.page != null;
		},
		
		isHostingAppEnabled: function() {
			return BnsC2CPlugin.chatAppIds[BnsC2CLoader.hostInfo.app] && BnsC2CPlugin.chatAppIds[BnsC2CLoader.hostInfo.app] == true;
		},
		
		calculateOfferTime: function(rawVal) {
			if (typeof(rawVal) === 'string' && rawVal.length > 0) {
				tmUnit = rawVal.charAt(rawVal.length - 1);
				intVal = rawVal.substring(0, rawVal.length - 1);
				if (tmUnit == 's') {
					return parseInt(intVal);
				} else if (tmUnit == 'm') {
					return parseInt(intVal) * 60;
				} else if (tmUnit == 'h') {
					return parseInt(intVal) * 60 * 60 ;
				} else if (tmUnit == 'd') {
					return parseInt(intVal) * 24 * 60 * 60;
				} else if (tmUnit >= '0' && tmUnit <= '9') {
					return parseInt(rawVal);
				}
			}
			return '';
		},
		
		calculateSysInitTimes: function() {
			if (! BnsC2CPlugin.chatOfferInfo.SI.CHAT.enabled) {
				return;
			}
			BnsC2CPlugin.chatOfferInfo.SI.CHAT.idle = BnsC2CPlugin.calculateOfferTime(BnsC2CPlugin.chatOfferInfo.SI.CHAT.idle);
			BnsC2CPlugin.chatOfferInfo.SI.CHAT.timeout = BnsC2CPlugin.calculateOfferTime(BnsC2CPlugin.chatOfferInfo.SI.CHAT.timeout);
			BnsC2CPlugin.chatOfferInfo.SI.CHAT.suspension = BnsC2CPlugin.calculateOfferTime(BnsC2CPlugin.chatOfferInfo.SI.CHAT.suspension);
		},
		
		/*
		{"ResponsePayload":
			{"MediaOffer": {
				"ConAppId":"SOL","PageId":"SiTcom_CompetitivePricing:Commissions-Fees:3693","AccessMode":"PUBLIC","HelpDeskId":"Retail_Sales","BusinessUnit":"Retail",
				"FlowQualifier":[
					{"FlowInitMode":"SI","MediaQualifier":{"MediaType":"CHAT","MediaStatus":{"Enabled":true,"HelpDeskStatus":"NoAgents"},"IdleTimeToOffer":7,"OfferTimeOut":88,"SysOfferSuspensionPeriod":99}},
					{"FlowInitMode":"UI","MediaQualifier":{"MediaType":"CHAT","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":7,"OfferTimeOut":88,"SysOfferSuspensionPeriod":99}},
					{"FlowInitMode":"AA","MediaQualifier":{"MediaType":"CHAT","MediaStatus":{"Enabled":true,"HelpDeskStatus":"SystemErr"},"IdleTimeToOffer":7,"OfferTimeOut":88,"SysOfferSuspensionPeriod":99}}
				],
				"Token":"SOMEEnryption"}
			}
		}
		*/
		buildC2COffer: function(data) {
			
			if (data.ResponsePayload === undefined || data.ResponsePayload == null) {
				if (console && console.log) {
					console.log("Invalid C2C qualifier response - no ResponsePayload");
				}
				return;
			}
			data = data.ResponsePayload;
			if (data.MediaOffer === undefined || data.MediaOffer == null || data.MediaOffer.ConAppId === undefined) {
				if (console && console.log) {
					console.log("Invalid C2C qualifier response - no MediaOffer");
				}
				return;
			}
			if (data.MediaOffer.ConAppId != BnsC2CLoader.hostInfo.app) {
				if (console && console.log) {
					console.log("Invalid ConAppId received");
				}
				return;
			}
			
			BnsC2CPlugin.chatOfferInfo.accessMode = data.MediaOffer.AccessMode;
			BnsC2CPlugin.chatOfferInfo.business = data.MediaOffer.Bu;
			BnsC2CPlugin.chatOfferInfo.c2cToken = data.MediaOffer.Token;
			BnsC2CPlugin.chatOfferInfo.helpDeskId = data.MediaOffer.HelpDeskId;
			
			for (i=0; i<data.MediaOffer.FlowQualifier.length; i++) {
				offerItem = data.MediaOffer.FlowQualifier[i];
				offerMediaType = BnsC2CPlugin.chatOfferInfo[offerItem.FlowInitMode][offerItem.MediaQualifier.MediaType];
				offerMediaType.enabled = offerItem.MediaQualifier.MediaStatus.Enabled;
				offerMediaType.reason = offerItem.MediaQualifier.MediaStatus.HelpDeskStatus;
				offerMediaType.idle = offerItem.MediaQualifier.IdleTimeToOffer;
				offerMediaType.timeout = offerItem.MediaQualifier.OfferTimeOut;
				offerMediaType.suspension = offerItem.MediaQualifier.SysOfferSuspensionPeriod;
			}
			BnsC2CPlugin.calculateSysInitTimes();
		},
		
		setupOnBeforeUnloadHandler: function() {
			window.onbeforeunload 
				= function(e) {
					e = e || event;
					if(e.preventDefault) {
						e.preventDefault(); 
					}
					e.returnValue = false;
					//alert('end of onbeforeunload');
				}
		},
		
		handleUserInitiated: function() {
			
			// Determine if UI flow mode and from Wealth
			// If so, then we should show the UI button; in this case, any 
			// unavailability
			isWealth = (BnsC2CPlugin.chatOfferInfo.business === 'WEALTH');
			
			if (! isWealth && ! BnsC2CPlugin.hasAnyOfferByFlowMode(BnsC2CPlugin.chatMode.userInitiated)) {
				return;
			}
			BnsC2CPlugin.showUIChatLaunchLink(BnsC2CPlugin.chatOfferInfo.business);
		},
		
		handleAppAbandoned: function() {
			if (! BnsC2CPlugin.hasAnyOfferByFlowMode(BnsC2CPlugin.chatMode.appAbandonded)) {
				return;
			}
			//BnsC2CPlugin.setupOnBeforeUnloadHandler();
			BnsC2CPlugin.hookupAppAbandonmentLinks();
		},
		
		
		
		/*******
		 * Secured consumer app quitting/C2C integration - START
		 *******/
		quitLinksHooked: false,
		
		ConAppQuitLink: function() {
			this.jqLink = null;
			this.orgHref = null;
			this.orgOnClick = null;
			this.quitActionInstalled = false;
		},
		
		/**
		 * jQuery: secure session quit links
		 */
		secureConAppQuitLinks: {
			quitLaunchLink: null,		/*link to HTML elment object of <a>, <input> or <button>, which launches the consumer app quit*/
			jQueryQuitLinks: []		/*array of quit link objects */
		},
		

		hookupSecureConAppQuitLinks: function() {
			if(! BnsC2CPlugin.quitLinksHooked) {
				BnsC2CPlugin.quitLinksHooked = true;
				jqLnks = jQuery(BnsC2CPlugin.lnkMarkers.quitConAppLink);
				if (jqLnks.length == 0) {
					return;
				}
				
				for (i=0; i<jqLnks.length; i++) {
					jqQuitLink = BnsC2CPlugin.installSecureConAppQuitAction(jqLnks[i]);
					BnsC2CPlugin.secureConAppQuitLinks.jQueryQuitLinks.push(jqQuitLink);
				} 
			}
		}, 
		
		installSecureConAppQuitAction: function(htmlLnk) {
			jqQuitLink = new BnsC2CPlugin.ConAppQuitLink();
			jqQuitLink.jqLink = jQuery(htmlLnk);
			if (BnsC2CPlugin.isAAAnchorLink(jqQuitLink.jqLink)) {
				BnsC2CPlugin.installAnchorQuitAction(jqQuitLink);
			} else if (BnsC2CPlugin.isAAButtonLink(jqQuitLink.jqLink)) {
				BnsC2CPlugin.installButtonQuitAction(jqQuitLink);
			}
			return jqQuitLink;
		},
		
		
		installAnchorQuitAction: function(jqQuitLink) {
			jqQuitLink.orgHref = jqQuitLink.jqLink.prop(BnsC2CPlugin.htmlDefs.hrefprop);
			jqQuitLink.jqLink.prop(BnsC2CPlugin.htmlDefs.hrefprop, 'JavaScript:void();');
			jqQuitLink.orgOnClick = jqQuitLink.jqLink.prop(BnsC2CPlugin.htmlDefs.onClickProp);

			jqQuitLink.jqLink[0].onclick = BnsC2CPlugin.launchC2CQuitFromConAppLink;
			jqQuitLink.quitActionInstalled = true;
		},
		
		installButtonQuitAction: function(jqQuitLink) {
			jqQuitLink.orgOnClick = jqQuitLink.jqLink.prop(BnsC2CPlugin.htmlDefs.onClickProp);
			jqQuitLink.jqLink[0].onclick = BnsC2CPlugin.launchC2CQuitFromConAppLink;
			jqQuitLink.quitActionInstalled = true;
		},
		
		
		launchC2CQuitFromConAppLink: function() {
			BnsC2CPlugin.launchC2CQuitFromConApp(this);
		}, 
		
		
		launchC2CQuitFromConApp: function(launchLnk) {
			//alert('can\'t quit just yet... there\'s  a C2C chat going on!');

			BnsC2CPlugin.secureConAppQuitLinks.quitLaunchLink = (launchLnk !== undefined && launchLnk != null) ? launchLnk : null;
			
			if (BnsC2CPlugin.hasActiveChat()) {
				BnsC2CPlugin.msgHandlers.closechat('solQuit');
			} else {
				// Abnormal case: there are no active chat cookies, but the 
				//  secure consumer app's quit mechanism still has the C2C 
				//  functionality
				// Need to replace the original functionality as we found it
				BnsC2CPlugin.restoreConAppQuitLinks();
			}

			return false;
		},
		
		handleSecureConAppQuitLinks: function() {
			
			// Check for active chat cookie: 
			// If cookie exists, then install the C2C logic on the quit links
			if (BnsC2CPlugin.hasActiveChat()) {
				BnsC2CPlugin.hookupSecureConAppQuitLinks();
			}
		}, 
		
		restoreConAppQuitActions: function(jqQuitLink) {
			if (! jqQuitLink.quitActionInstalled) {
				return;
			}
			if (jqQuitLink.orgHref != null) {
				jqQuitLink.jqLink.prop(BnsC2CPlugin.htmlDefs.hrefprop, jqQuitLink.orgHref);
			}
			//jqAALink.jqLink.prop(BnsC2CPlugin.htmlDefs.onClickProp, jqAALink.orgOnClick);
			jqQuitLink.jqLink[0].onclick = jqQuitLink.orgOnClick;
			jqQuitLink.quitActionInstalled = false;
		},
		
		// This is fired when the consumer app's quit buttons need to have their
		// original functionality restored
		restoreConAppQuitLinks: function(launchLnk) {
			len = BnsC2CPlugin.secureConAppQuitLinks.jQueryQuitLinks.length;
			for (i=0; i<len; i++) {
				BnsC2CPlugin.restoreConAppQuitActions(BnsC2CPlugin.secureConAppQuitLinks.jQueryQuitLinks[i]);
			}
			BnsC2CPlugin.secureConAppQuitLinks.jQueryQuitLinks.length = 0;
//			BnsC2CPlugin.secureConAppQuitLinks.quitLaunchLink = (launchLnk !== undefined && launchLnk != null) ? launchLnk : null;
		},		

		/*******
		 * Secured consumer app quitting/C2C integration - END
		 *******/
		
		hookSysInitDocEvts: function() {
			if (BnsC2CPlugin.chatStateInfo.sysInitEvtHooked) {
				return;
			}
			hostDoc = jQuery(document);
			hostDoc.mouseup(function(e) {
				BnsC2CPlugin.setActAfterTimerSet(true);
			});
			hostDoc.keyup(function(e) {
				BnsC2CPlugin.setActAfterTimerSet(true);
			});
			BnsC2CPlugin.chatStateInfo.sysInitEvtHooked = true;
		},
		
		handleSysInitiated: function() {
			if (! BnsC2CPlugin.hasAnyOfferByFlowMode(BnsC2CPlugin.chatMode.systemInitiated)) {
				return;
			}
			if (! BnsC2CPlugin.shouldStartSITimer()) {
				return;
			}
			setTimeout(BnsC2CPlugin.sysInitChatTimerHandler, BnsC2CPlugin.chatOfferInfo.SI.CHAT.idle * 1000);
			BnsC2CPlugin.setActAfterTimerSet(false);
			BnsC2CPlugin.hookSysInitDocEvts();
		},
		
		establishPstMsgConn: function() {
			if (! BnsC2CPlugin.chatStateInfo.postMsgHooked) {
				BnsPostMessage.hookMsgHandlers(BnsC2CPlugin.msgHandlers, BnsC2CPlugin.getC2CWebAppRootURL());
				BnsC2CPlugin.chatStateInfo.postMsgHooked = true;
			}
		},
		
		setC2CSiteRootURLOnRestore: function() {
			rtURL = BnsC2CCookie.getActiveChatCookieVal();
			if (rtURL != null) {
				BnsC2CLoader.c2cSiteRootURL = rtURL;
			}
		},
		
		/**
		 * restore chat window on hosting site page navigation or from popup chat
		 * flowMode: popup, restore
		*/
		restoreActiveChat: function(flowMode) {
			if (! BnsC2CPlugin.hasActiveChat()) {
				return;
			}
			
			BnsC2CPlugin.establishPstMsgConn();
			BnsC2CPlugin.createC2CDiviFrames();
			
			paramMap = {
					flow: flowMode,
					language: BnsC2CLoader.hostInfo.language,
					winsize: BnsC2CCookie.getChatWinSizeCookieVal()
				};
			BnsC2CPlugin.setC2CSiteRootURLOnRestore();
			viewId = BnsC2CCookie.isChatWinMinimized() ? 'chatMinimized' : 'chat';
			BnsC2CPlugin.loadAndShowC2CPage(viewId, paramMap);
			BnsC2CPlugin.setChatLaunchMode(BnsC2CPlugin.chatMode.chatRestored);
			BnsC2CPlugin.mngHostingPageStateOnChat();
		},
		
		mngHostingPageStateOnInit: function() {
			BnsC2CPlugin.setupInitIFrmSizes(); 
			BnsC2CPlugin.handleUserInitiated();
			BnsC2CPlugin.handleAppAbandoned();
			BnsC2CPlugin.handleSysInitiated();
			
			BnsC2CPlugin.handleSecureConAppQuitLinks();
		},
		
		g_PageUIChatAvailablityMap: Object,
		//20151113: added new hash for EWT value
		g_PageUIChatEWTMap:Object,
		
		/*get UI CHAT availablily */
		getUIChatAvailablity:function()
		{
			//20151113: added two lines to re-init hash object
			BnsC2CPlugin.g_PageUIChatAvailablityMap={};
			BnsC2CPlugin.g_PageUIChatEWTMap={};
			
			if( BnsC2CPlugin.g_dataMap !== null && typeof BnsC2CPlugin.g_PageArray !="undefined" && BnsC2CPlugin.g_PageArray.length>0  )
			{
				
				for(i=0;i< BnsC2CPlugin.g_PageArray.length;i++)
				{
					if(BnsC2CPlugin.g_PageArray[i] !="")
					{
						var flowQualifierIndex=0;
						var jsonObjPage=jQuery.parseJSON( BnsC2CPlugin.pascalStringCase(BnsC2CPlugin.g_dataMap[BnsC2CPlugin.g_PageArray[i]]));
						//20151113: added the if condition to enhance null check
						if(typeof jsonObjPage != "undefined" &&  typeof jsonObjPage['ResponsePayload'] != "undefined" 
							&&  typeof jsonObjPage['ResponsePayload']['MediaOffer'] != "undefined" 
								&& typeof jsonObjPage['ResponsePayload']['MediaOffer']['FlowQualifier'] != "undefined" )
						{	
							while(typeof jsonObjPage['ResponsePayload']['MediaOffer']['FlowQualifier'][flowQualifierIndex]  != "undefined" )
							{
								var flowQualifierObj=jsonObjPage['ResponsePayload']['MediaOffer']['FlowQualifier'][flowQualifierIndex];
								if(flowQualifierObj.FlowInitMode=="UI" && flowQualifierObj.MediaQualifier.MediaType=="CHAT"  )
								{
									BnsC2CPlugin.g_PageUIChatAvailablityMap[BnsC2CPlugin.g_PageArray[i]]=flowQualifierObj.MediaQualifier.MediaStatus.Enabled;
									//20151113: added the EWT to hash object
									if(typeof flowQualifierObj.MediaQualifier.MediaStatus.EWT != "undefined"  )
									{	
										BnsC2CPlugin.g_PageUIChatEWTMap[BnsC2CPlugin.g_PageArray[i]]=flowQualifierObj.MediaQualifier.MediaStatus.EWT;
									}
									
									
								}
								
								flowQualifierIndex++;
							}//end while
						}
						
					}
					
				}
				
				
			}
		},
		
		//20151113: add 2 function1, 1 for ui availablity of a page; 2 for EWT of a page
		isUIChatAvailable:function(pageid)
		{
			var result=false;
			if(typeof BnsC2CPlugin.g_PageUIChatAvailablityMap[pageid] !="undefined")
			{
				result=BnsC2CPlugin.g_PageUIChatAvailablityMap[pageid];
			}
			return result;
		},
		
		getUIChatEWT:function(pageid)
		{
			var result=null; //a value 10000 means agent busy, null means not found
			if(typeof BnsC2CPlugin.g_PageUIChatEWTMap[pageid] !="undefined")
			{
				result=BnsC2CPlugin.g_PageUIChatEWTMap[pageid];
			}
			return result;
			
		},
		
		/**
		 * call back on c2c offer info retrieved
		*/
		g_dataMap : null, /* to hold the retrieved c2c data*/
		g_isC2Cv2Launched : false, /* is v2 c2c launched for SOL SMC centre */
		                           /*todo: need to set it to false whenever possible*/
		
		/*first page load: handle the default page offer */
		handleC2COffer: function(data) {
			hasData = data !== undefined && data != null && (typeof BnsC2CLoader.hostInfo.page!='undefined');
			
			if (hasData) {
				//20151113: always set data if not null
				BnsC2CPlugin.g_dataMap=data;
				
				BnsC2CPlugin.g_currentPage=BnsC2CLoader.hostInfo.page;
				BnsC2CPlugin.buildC2COffer(  jQuery.parseJSON( BnsC2CPlugin.pascalStringCase(data[BnsC2CPlugin.g_currentPage]) ) );
				//BnsC2CPlugin.buildC2COffer(  BnsC2CPlugin.g_dataMap[BnsC2CPlugin.g_currentPage] );
				
			}
			if (BnsC2CPlugin.hasActiveChat() && !BnsC2CCookie.hasActiveChatInPopup()) {
				BnsC2CPlugin.establishPstMsgConn();
				BnsC2CPlugin.restoreActiveChat(BnsC2CPlugin.jsfViews.chat.restoreChatParam);
				BnsC2CPlugin.setupInitIFrmSizes();
				
				BnsC2CPlugin.handleSecureConAppQuitLinks(); // Plog 450
				return;
			}
			if (hasData) {
				BnsC2CPlugin.establishPstMsgConn();
				BnsC2CPlugin.mngHostingPageStateOnInit();
				//get page ui chat status
				BnsC2CPlugin.getUIChatAvailablity();
				
				try {
						if(typeof afterHandleC2COfferEvent =="function")
						{
							afterHandleC2COfferEvent();
						}
				} catch (exp) {
					
				}
			}
		},
		
		g_currentPage : null,
		/*curtain page load: handle the page offer under each button */
		handleC2COfferv2: function(data, pageid) {
			//20151113: added && before the 2nd line
			hasData = data !== undefined && data != null && (typeof BnsC2CPlugin.g_PageArray!='undefined')
			&& BnsC2CPlugin.arrayContains( BnsC2CPlugin.g_PageArray,pageid );
			
			
			if (hasData) {
				BnsC2CPlugin.g_currentPage=pageid;
				BnsC2CPlugin.buildC2COffer(  jQuery.parseJSON( BnsC2CPlugin.pascalStringCase(data[pageid]) ) );
				//BnsC2CPlugin.buildC2COffer(  data[BnsC2CPlugin.g_currentPage] );
				
			}
			if (BnsC2CPlugin.hasActiveChat() && !BnsC2CCookie.hasActiveChatInPopup()) {
				BnsC2CPlugin.establishPstMsgConn();
				BnsC2CPlugin.restoreActiveChat(BnsC2CPlugin.jsfViews.chat.restoreChatParam);
				BnsC2CPlugin.setupInitIFrmSizes();
				
				BnsC2CPlugin.handleSecureConAppQuitLinks(); // Plog 450
				return;
			}
			if (hasData) {
				BnsC2CPlugin.establishPstMsgConn();
				BnsC2CPlugin.mngHostingPageStateOnInit();
				//get page ui chat status
				BnsC2CPlugin.getUIChatAvailablity();
				
				try {
					if(typeof afterHandleC2COfferEvent =="function")
					{
						afterHandleC2COfferEvent();
					}
				} catch (exp) {
				
				}
				
			}
		},
		
		handleC2COfferErr: function() {
			/**
			 * TODO: to be removed. Just for testing on the case of retrieving failed.
			 * it invoked on C2C offer retrieved.
			*/
			/*
			mockData = {
				"serviceID":"AdminService",
				"header":{"serviceID":"AdminService","transactionID":"dcea6cc7-fbf2-4d02-a4f4-a1d1517d6ef3","status":"0"},
				"ResponsePayload": {
					"MediaOffer": {
						"ConAppId":"SiTcom",
						"PageId":"3611",
						"PageDesc":"Why Scotia iTRADE:Why Scotia iTRADE:3611",
						"AccessMode":"PUBLIC",
						"HelpDeskId":"Wealth_sales",
						"Bu":"WEALTH",
						"FlowQualifier": [
						     {"FlowInitMode":"AA","MediaQualifier":{"MediaType":"CHAT","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":"","OfferTimeOut":"","SysOfferSuspensionPeriod":"","MaxWaitTimeThreshold":"45s","ChatIdleTime":"5m","ChatExtensionTime":"2m"}},
						     {"FlowInitMode":"AA","MediaQualifier":{"MediaType":"CLICK2CALL","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":"","OfferTimeOut":"","SysOfferSuspensionPeriod":"","MaxWaitTimeThreshold":"45s","ChatIdleTime":"","ChatExtensionTime":""}},
						     {"FlowInitMode":"SI","MediaQualifier":{"MediaType":"CHAT","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":"2m","OfferTimeOut":"1m","SysOfferSuspensionPeriod":"30d","MaxWaitTimeThreshold":"1m","ChatIdleTime":"5m","ChatExtensionTime":"2m"}},
						     {"FlowInitMode":"SI","MediaQualifier":{"MediaType":"CLICK2CALL","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":"","OfferTimeOut":"","SysOfferSuspensionPeriod":"","MaxWaitTimeThreshold":"1m","ChatIdleTime":"","ChatExtensionTime":""}},
						     {"FlowInitMode":"UI","MediaQualifier":{"MediaType":"CHAT","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":"","OfferTimeOut":"","SysOfferSuspensionPeriod":"","MaxWaitTimeThreshold":"3m","ChatIdleTime":"5m","ChatExtensionTime":"2m"}},
						     {"FlowInitMode":"UI","MediaQualifier":{"MediaType":"CLICK2CALL","MediaStatus":{"Enabled":true,"HelpDeskStatus":"Available"},"IdleTimeToOffer":"","OfferTimeOut":"","SysOfferSuspensionPeriod":"","MaxWaitTimeThreshold":"3m","ChatIdleTime":"","ChatExtensionTime":""}}
						]
					}
				}
			};
			
			BnsC2CPlugin.buildC2COffer(mockData);
			BnsC2CPlugin.establishPstMsgConn();
			if (BnsC2CPlugin.hasActiveChat()) {
				BnsC2CPlugin.restoreActiveChat(BnsC2CPlugin.jsfViews.chat.restoreChatParam);
				BnsC2CPlugin.setupInitIFrmSizes();
			} else {
				BnsC2CPlugin.mngHostingPageStateOnInit();
			}
			*/
		},
		
		/*Victor Y Zhang: build page list using the combined page and pagelist from BnsC2CLoader.hostinfo*/
		g_PageArray:[],
		
		rebuildPageList : function()
		{
			//var newPageArray=[];
			if(typeof BnsC2CLoader.hostInfo != 'undefined' &&
					(  typeof BnsC2CLoader.hostInfo.page !='undefined'    )  
			)
			{
				
				if(typeof BnsC2CLoader.hostInfo.pagelist !='undefined' && BnsC2CLoader.hostInfo.pagelist.length>0 )
				{
					var pageArray = BnsC2CLoader.hostInfo.pagelist.split(";"); 
					for(i=0;i<pageArray.length;i++)
					{
						if(pageArray[i] !="")
							BnsC2CPlugin.g_PageArray.push(pageArray[i].trim());
					}
				}
				
				if(typeof BnsC2CLoader.hostInfo.page !='undefined' && BnsC2CLoader.hostInfo.page.length>0)
				{
					if(BnsC2CPlugin.g_PageArray.length==0 || BnsC2CPlugin.arrayContains( BnsC2CPlugin.g_PageArray,BnsC2CLoader.hostInfo.page  )==false  )
					{
						BnsC2CPlugin.g_PageArray.push(BnsC2CLoader.hostInfo.page.trim());
					}
				}
			}
			
			return BnsC2CPlugin.g_PageArray.toString().replace(/,/g, ";");
		},
		
		
		/*Victor Y Zhang: Pascal Case the JSONP and replace CLICK_2_CALL with CLICK2CALL.*/
		pascalStringCase:function(string) {
			return string.replace(/(\"\w+\"\:)/g, function(_, word) { 
				return word.charAt(0) + word.charAt(1).toUpperCase() + word.slice(2) ;
				}).replace(/(CLICK_2_CALL)/g, "CLICK2CALL").replace(/(NO_AGENTS)/g, "NoAgents").replace(/(AVAILABLE)/g, "Available").replace(/(ewt)/gi, "EWT"); 
		},
		
			
		removeLastInstance:function(badtext, str) {
		    var charpos = str.lastIndexOf(badtext);
		    if (charpos<0) return str;
		    ptone = str.substring(0,charpos);
		    pttwo = str.substring(charpos+(badtext.length));
		    return (ptone+pttwo);
		},
		
		isMacintosh: function() {
			  return navigator.platform.indexOf('Mac') > -1;
		},
		
		isSafari:function() {
			  return  navigator.vendor && navigator.vendor.indexOf('Apple') > -1 &&
		        navigator.userAgent && !navigator.userAgent.match('CriOS');
		},
		
		getBrowserMajorVersion:function(){
			var nVer = navigator.appVersion;
			var nAgt = navigator.userAgent;
			var browserName  = navigator.appName;
			var fullVersion  = ''+parseFloat(navigator.appVersion); 
			var majorVersion = parseInt(navigator.appVersion,10);
			var nameOffset,verOffset,ix;

			// In Opera 15+, the true version is after "OPR/" 
			if ((verOffset=nAgt.indexOf("OPR/"))!=-1) {
			 browserName = "Opera";
			 fullVersion = nAgt.substring(verOffset+4);
			}
			// In older Opera, the true version is after "Opera" or after "Version"
			else if ((verOffset=nAgt.indexOf("Opera"))!=-1) {
			 browserName = "Opera";
			 fullVersion = nAgt.substring(verOffset+6);
			 if ((verOffset=nAgt.indexOf("Version"))!=-1) 
			   fullVersion = nAgt.substring(verOffset+8);
			}
			// In MSIE, the true version is after "MSIE" in userAgent
			else if ((verOffset=nAgt.indexOf("MSIE"))!=-1) {
			 browserName = "Microsoft Internet Explorer";
			 fullVersion = nAgt.substring(verOffset+5);
			}
			// In Chrome, the true version is after "Chrome" 
			else if ((verOffset=nAgt.indexOf("Chrome"))!=-1) {
			 browserName = "Chrome";
			 fullVersion = nAgt.substring(verOffset+7);
			}
			// In Safari, the true version is after "Safari" or after "Version" 
			else if ((verOffset=nAgt.indexOf("Safari"))!=-1) {
			 browserName = "Safari";
			 fullVersion = nAgt.substring(verOffset+7);
			 if ((verOffset=nAgt.indexOf("Version"))!=-1) 
			   fullVersion = nAgt.substring(verOffset+8);
			}
			// In Firefox, the true version is after "Firefox" 
			else if ((verOffset=nAgt.indexOf("Firefox"))!=-1) {
			 browserName = "Firefox";
			 fullVersion = nAgt.substring(verOffset+8);
			}
			// In most other browsers, "name/version" is at the end of userAgent 
			else if ( (nameOffset=nAgt.lastIndexOf(' ')+1) < 
					  (verOffset=nAgt.lastIndexOf('/')) ) 
			{
			 browserName = nAgt.substring(nameOffset,verOffset);
			 fullVersion = nAgt.substring(verOffset+1);
			 if (browserName.toLowerCase()==browserName.toUpperCase()) {
			  browserName = navigator.appName;
			 }
			}
			// trim the fullVersion string at semicolon/space if present
			if ((ix=fullVersion.indexOf(";"))!=-1)
			   fullVersion=fullVersion.substring(0,ix);
			if ((ix=fullVersion.indexOf(" "))!=-1)
			   fullVersion=fullVersion.substring(0,ix);

			majorVersion = parseInt(''+fullVersion,10);
			if (isNaN(majorVersion)) {
			 fullVersion  = ''+parseFloat(navigator.appVersion); 
			 majorVersion = parseInt(navigator.appVersion,10);
			}
			
			return majorVersion;
		},
		
		/*v2: retrive offer for all pages, including the page list*/
		retrieveC2COffers: function() {
			//block mac os x, safari 9 and up for now
			//the block is lifted due to rootURL is checked in now
			/*
			if(BnsC2CPlugin.isMacintosh() && BnsC2CPlugin.isSafari() )
			{
				var ver=BnsC2CPlugin.getBrowserMajorVersion();
				if( typeof ver != "undefined" && (!isNaN(ver)) && ver >=9 )
				return;
			}
			*/
			
			if (! BnsC2CPlugin.isHostedInChatInitiationPage()) {
				//throw "BnsC2CLoader.hostInfo.app and BnsC2CLoader.hostInfo.page must be string";
				BnsC2CPlugin.handleC2COffer(null);
				return;
			}
			if (! BnsC2CPlugin.isHostingAppEnabled() ) {
				//throw "Invalid app ID defined in BnsC2CLoader.hostInfo";
				return;
			}
			
			/*verify rootUrl */
			
			consumerRootUrl = BnsC2CPlugin.getHostingPageRootURL(); 
			url = BnsC2CLoader.getC2CQualificationURL() + BnsC2CLoader.hostInfo.app + "?callback=?";
			jQuery.getJSON(url, { pageId: BnsC2CPlugin.rebuildPageList(), rootUrl: consumerRootUrl} )
				.done(BnsC2CPlugin.handleC2COffer)
				.fail(BnsC2CPlugin.handleC2COfferErr);
		},
	
		
		
		hasActiveChat: function() {
			return BnsC2CCookie.hasActiveChat();
		},
		
		cleanCookies: function() {
			BnsC2CCookie.removeChatCookies();
			BnsC2CCookie.removeActiveChatInPopupCookie();
		},
		
		
		
		resetUISizev1:function(){
			BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSize = BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSizeOrg;
			
		},
		
		resetUISizev2:function(){
			BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSize = BnsC2CPlugin.viewStyles.invitationStyles.initIFrmSizeSMCFlash;
			
		},
		
		prepareOrgC2CStyles:function()
		{
			aaSiInvStyles = jQuery.extend({}, BnsC2CPlugin.viewStyles.invitationStyles);
			aaSiInvStyles.blockingDivCSS = BnsC2CPlugin.viewStyles.invitationAaSiStyles.blockingAaSiDivCSS;
			aaSiInvStyles.containerDivCSS = BnsC2CPlugin.viewStyles.invitationAaSiStyles.containerAaSiDivCSS;
			BnsC2CPlugin.viewStyles.invitationAaSiStyles = aaSiInvStyles;
			
			jsfAaSiInvVDef = jQuery.extend({}, BnsC2CPlugin.jsfViews.chatInvitation);
			jsfAaSiInvVDef.viewStylesId = BnsC2CPlugin.jsfViews.chatAaSiInvitation.viewStylesId;
			BnsC2CPlugin.jsfViews.chatAaSiInvitation = jsfAaSiInvVDef;
			
			jsfChatMiniV = jQuery.extend({}, BnsC2CPlugin.jsfViews.chat);
			jsfChatMiniV.viewStylesId = BnsC2CPlugin.jsfViews.chatMinimized.viewStylesId;
			BnsC2CPlugin.jsfViews.chatMinimized = jsfChatMiniV;
			
		},
		
		prepareC2CStyles: function() {
			
			
			BnsC2CPlugin.prepareOrgC2CStyles();
		},
		
		prepareC2CStylesv1: function() {
			
			BnsC2CPlugin.resetUISizev1();
			BnsC2CPlugin.prepareOrgC2CStyles();
		},
		
		prepareC2CStylesv2: function() {
			BnsC2CPlugin.resetUISizev2();
			BnsC2CPlugin.prepareOrgC2CStyles();
		},
		
		hookDocReady: function() {
			jQuery(document).ready(function () {
				/**
				 * kick start everything
				 */
				BnsC2CPlugin.retrieveC2COffers();
				
				/**
				 * TODO: to be removed. Just for testing on the case of retrieving failed.
				 * it invoked on C2C offer retrieved.
				*/
				//BnsC2CPlugin.handleC2COfferErr();
			});
		}
	};

	(function() {
		window.BnsC2CPlugin = BnsC2CPlugin;
		BnsC2CPlugin.prepareC2CStyles();
		BnsC2CPlugin.hookDocReady();
	})();
			
})(window);
